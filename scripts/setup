#!/bin/bash 
set -euo pipefail

# Uncomment the line below if you would like to diagnose what commands are being done on your behalf.
# set -x

DATABASE_URL="${DATABASE_URL:-""}"

if [ -z "${DATABASE_URL}" ]; then
  if [ -f .env ]; then
    source .env
  fi
fi

if [ -z "${DATABASE_URL}" ]; then
  echo "DATABASE_URL not set." >&2
  exit 1
fi

DEFAULT_POSTGRES_HOST="localhost"
DEFAULT_POSTGRES_USER=""
DEFAULT_POSTGRES_PASSWORD=""
DEFAULT_POSTGRES_DATABASE="rustodon"

infoMsg() {
  echo "[*] ${1}"
}

alertMsg() {
  echo "[!] ${1}" >&2
}

# Ensure rustup and rust are installed
if which rustup 2>/dev/null 1>&2 ; then
  NIGHTLY_VERSION="$(cat REQUIRED_RUST_NIGHTLY)"
  infoMsg "Setting Rust version to ${NIGHTLY_VERSION}..."
  # Ensure that rust is using nightly for library features
  rustup override set "${NIGHTLY_VERSION}" 2>/dev/null 1>&2
else
  # Installation deferred to user
  alertMsg "You must install rust and rustup, see: https://www.rust-lang.org/en-US/install.html and https://rustup.rs/"
  exit 1
fi

if ! rustup component list | grep rustfmt-preview | grep installed 2>/dev/null 1>&2 ; then
  infoMsg "Installing rustfmt..."
  rustup component add rustfmt-preview
fi

# Ensure Postgres is installed
if ! which psql 2>/dev/null 1>&2 ; then
  # Installation deferred to user
  alertMsg "You must install Postgres, see: https://www.postgresql.org/download/"
  exit 1
fi

# Don't track changes to .env
git update-index --assume-unchanged .env

if [ -z "${DATABASE_URL}" ]; then
  if ! grep DATABASE_URL ./.env 2>/dev/null 1>&2; then
    # Prompt user for local database information
    infoMsg "Enter the database URL for your configuration."
    infoMsg "If you are using SQLite, enter a path to the file, a la:"
    infoMsg "rustodon.sqlite"
    infoMsg "If you are using Postgres, enter a Postgres database URL, a la:"
    infoMsg "postgres://myusername@localhost/rustodon"
    infoMsg "OR if you are using a password, "
    infoMsg "postgres://myusername:mypassword@localhost/rustodon"
    read -p "Enter datatabase URL value: " DATABASE_URL
    infoMsg "Database URL is ${DATABASE_URL}"
    echo "DATABASE_URL=${DATABASE_URL}" >> .env
  fi
fi

# Ruby and Sass dependency checks
if ! which bundler 2>/dev/null 1>&2 ; then
  infoMsg "Installing Bundler..."
  gem install bundler
fi
if ! bundle check 2>/dev/null 1>&2 ; then
  infoMsg "Installing Ruby dependencies..."
  bundle install
fi

# Diesel CLI install
if ! which diesel 2>/dev/null 1>&2 ; then
  infoMsg "Installing diesel_cli..."
  cargo install diesel_cli --no-default-features --features="postgres sqlite"
fi
if ! which cargo-watch 2>/dev/null 1>&2 ; then
  infoMsg "Installing cargo-watch..."
  cargo install cargo-watch 
fi

# Database creation and migration
infoMsg "Running migrations..."
if [[ "$DATABASE_URL" = "postgres"* ]]; then
  infoMsg "Detected Postgres..."
  diesel database setup --config-file=diesel.postgres.toml --migration-dir=migrations
  diesel print-schema --config-file=diesel.postgres.toml > database/src/schema.rs
else
  infoMsg "Assuming SQLite..."
  diesel database setup --config-file=diesel.sqlite.toml --migration-dir=migrations_sqlite
  diesel print-schema --config-file=diesel.sqlite.toml > database/src/schema.rs
fi

if [ ! -f "Rocket.toml" ]; then
  infoMsg "Generating Rocket.toml. This contains your server secret key, keep this file private."
  cat <<-EOTOML > Rocket.toml
[development]
address = "localhost"
port = 8000
workers = 1
log = "normal"
secret_key = "$(openssl rand -base64 32)"

[production]
address = "0.0.0.0"
port = 8000
workers = 12
log = "normal"
secret_key = "$(openssl rand -base64 32)"
EOTOML
fi

# Setup complete
infoMsg "Setup is complete, you may run the server with:"
echo "bundle exec foreman start"
